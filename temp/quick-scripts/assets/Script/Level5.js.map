{"version":3,"sources":["Level5.js"],"names":["game","require","cc","Class","extends","Component","properties","boardNode","Node","knifeNode","knifePrefab","Prefab","layoutKnife","Layout","labelScore","Label","knifeBoard1","knifeBoard2","knifeBoard3","knifeBoard4","knifeMini","knifeAudio","type","AudioClip","default","knifeFail","knifeNodeArr","score","numberKnife","level","setScore","value","string","onLoad","createLayoutKnife","node","on","throwKnife","isThrow","boardRotation","remainKnife","childrenCount","push","setInterval","changeSpeed","directionRotation","Math","random","speedRotation","children","active","runAction","sequence","moveTo","v2","x","y","width","callFunc","audioEngine","play","isHit","abs","angle","loseGame","createKnifePlayer","finishLevel","update","dt","angleKnife"],"mappings":"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","file":"Level5.js","sourceRoot":"../../../../assets/Script","sourcesContent":["const game = require('Game');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        boardNode: cc.Node,\n        knifeNode: cc.Node,\n        knifePrefab: cc.Prefab,\n        layoutKnife: cc.Layout,\n        labelScore: cc.Label,\n        knifeBoard1: cc.Node,\n        knifeBoard2: cc.Node,\n        knifeBoard3: cc.Node,\n        knifeBoard4: cc.Node,\n        knifeMini: cc.Prefab,\n        knifeAudio: {\n            type: cc.AudioClip,\n            default: null,\n        },\n        knifeFail: {\n            type: cc.AudioClip,\n            default: null,\n        },\n        // loading: cc.Node,\n        knifeNodeArr: [],\n        score: 0,\n        numberKnife: 0,\n        level: 5,\n    },\n\n    setScore(value) {\n        this.score = value;\n        this.labelScore.string = this.score;\n    },\n\n    onLoad() {\n        // this.loading.active = false;\n        game.createLayoutKnife(9, this.knifeMini, this.layoutKnife);\n        this.node.on('touchstart', this.throwKnife, this);\n        this.isThrow = true;\n        this.boardRotation = 2;\n        this.remainKnife = this.layoutKnife.node.childrenCount;\n        this.knifeNodeArr.push(this.knifeBoard1, this.knifeBoard2, this.knifeBoard3, this.knifeBoard4);\n        setInterval(() => {\n            this.changeSpeed();\n        }, 2000);\n    },\n\n    changeSpeed() {\n        let directionRotation = Math.random() > 0.5 ? 1 : -1;\n        let speedRotation = 1 + Math.random() * 4;\n        this.boardRotation = directionRotation * speedRotation;\n    },\n\n    throwKnife() {\n        if (this.isThrow) {\n            this.isThrow = false;\n            this.layoutKnife.node.children[this.numberKnife].active = false;\n            this.remainKnife--;\n            this.numberKnife++;\n            this.knifeNode.runAction(\n                cc.sequence(\n                    cc.moveTo(0.1, cc.v2(this.knifeNode.x, this.boardNode.y - this.boardNode.width / 2)),\n                    cc.callFunc(() => {\n                        cc.audioEngine.play(this.knifeAudio, false, 1);\n                        let isHit = false;\n                        for (let knifeNode of this.knifeNodeArr) {\n                            if (Math.abs(knifeNode.angle) < 15 || (360 - Math.abs(knifeNode.angle)) < 15) {\n                                isHit = true;\n                                break;\n                            }\n                        }\n                        if (isHit) {\n                            game.loseGame(this.knifeFail, this.knifeNode, this.score, this.level);\n                        } else {\n                            game.createKnifePlayer(this.knifePrefab, this.knifeNode, this.knifeNodeArr, this.node);\n                            this.isThrow = true;\n                            this.score++;\n                            this.labelScore.string = this.score;\n                            if (this.remainKnife === 0) {\n                                this.isThrow = false;\n                                game.finishLevel(this.level, this.score);\n                            }\n                        }\n                    })\n                )\n            );\n        }\n    },\n\n    // start () {},\n\n    update(dt) {\n        game.angleKnife(this.boardNode, this.boardRotation, this.knifeNodeArr);\n    },\n});"]}