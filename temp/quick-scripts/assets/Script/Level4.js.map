{"version":3,"sources":["Level4.js"],"names":["game","require","cc","Class","extends","Component","properties","boardNode","Node","knifeNode","knifePrefab","Prefab","layoutKnife","Layout","labelScore","Label","knifeBoard1","knifeBoard2","knifeMini","knifeAudio","type","AudioClip","default","knifeFail","knifeNodeArr","score","numberKnife","level","setScore","value","string","onLoad","createLayoutKnife","node","on","throwKnife","isThrow","boardRotation","remainKnife","childrenCount","push","setInterval","changeSpeed","directionRotation","Math","random","speedRotation","children","active","runAction","sequence","moveTo","v2","x","y","width","callFunc","audioEngine","play","isHit","abs","angle","loseGame","createKnifePlayer","nextLevel","update","dt","angleKnife"],"mappings":"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","file":"Level4.js","sourceRoot":"../../../../assets/Script","sourcesContent":["const game = require('Game');\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        boardNode: cc.Node,\n        knifeNode: cc.Node,\n        knifePrefab: cc.Prefab,\n        layoutKnife: cc.Layout,\n        labelScore: cc.Label,\n        knifeBoard1: cc.Node,\n        knifeBoard2: cc.Node,\n        knifeMini: cc.Prefab,\n        knifeAudio: {\n            type: cc.AudioClip,\n            default: null,\n        },\n        knifeFail: {\n            type: cc.AudioClip,\n            default: null,\n        },\n        //    loading: cc.Node,\n        knifeNodeArr: [],\n        score: 0,\n        numberKnife: 0,\n        level: 4,\n    },\n\n    setScore(value) {\n        this.score = value;\n        this.labelScore.string = this.score;\n    },\n\n    onLoad() {\n        // this.loading.active = false;\n        game.createLayoutKnife(9, this.knifeMini, this.layoutKnife);\n        this.node.on('touchstart', this.throwKnife, this);\n        this.isThrow = true;\n        this.boardRotation = 3;\n        this.remainKnife = this.layoutKnife.node.childrenCount;\n        this.knifeNodeArr.push(this.knifeBoard1, this.knifeBoard2);\n        setInterval(() => {\n            this.changeSpeed();\n        }, 2000);\n    },\n\n    changeSpeed() {\n        let directionRotation = Math.random() > 0.5 ? 1 : -1;\n        let speedRotation = 1 + Math.random() * 4;\n        this.boardRotation = directionRotation * speedRotation;\n    },\n\n    throwKnife() {\n        if (this.isThrow) {\n            this.isThrow = false;\n            this.layoutKnife.node.children[this.numberKnife].active = false;\n            this.remainKnife--;\n            this.numberKnife++;\n            this.knifeNode.runAction(\n                cc.sequence(\n                    cc.moveTo(0.1, cc.v2(this.knifeNode.x, this.boardNode.y - this.boardNode.width / 2)),\n                    cc.callFunc(() => {\n                        cc.audioEngine.play(this.knifeAudio, false, 1);\n                        let isHit = false;\n                        for (let knifeNode of this.knifeNodeArr) {\n                            if (Math.abs(knifeNode.angle) < 15 || (360 - Math.abs(knifeNode.angle)) < 15) {\n                                isHit = true;\n                                break;\n                            }\n                        }\n                        if (isHit) {\n                            game.loseGame(this.knifeFail, this.knifeNode, this.score, this.level);\n                        } else {\n                            game.createKnifePlayer(this.knifePrefab, this.knifeNode, this.knifeNodeArr, this.node);\n                            this.isThrow = true;\n                            this.score++;\n                            this.labelScore.string = this.score;\n                            if (this.remainKnife === 0) {\n                                this.isThrow = false;\n                                game.nextLevel(this.level, this.score);\n                            }\n                        }\n                    })\n                )\n            );\n        }\n    },\n\n    // start () {},\n\n    update(dt) {\n        game.angleKnife(this.boardNode, this.boardRotation, this.knifeNodeArr);\n    },\n});"]}