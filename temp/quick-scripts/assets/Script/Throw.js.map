{"version":3,"sources":["Throw.js"],"names":["cc","Class","extends","Component","properties","boardNode","Node","knifeNode","knifePrefab","Prefab","layoutKnife","Layout","labelScore","Label","score","numberKnife","level","onLoad","node","on","throwKnife","isThrow","zIndex","boardRotation","knifeNodeArr","setInterval","changeSpeed","remainKnife","childrenCount","directionRotation","Math","random","speedRotation","children","active","runAction","sequence","moveTo","v2","x","y","width","callFunc","isHit","abs","angle","spawn","rotateBy","director","loadScene","getCompo","getScene","getChildByName","getComponent","setScore","setLevel","instantiate","setPosition","position","addChild","push","string","start","update","dt","rad","PI","r","cos","sin"],"mappings":"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","file":"Throw.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n       boardNode: cc.Node,\r\n       knifeNode: cc.Node,\r\n       knifePrefab: cc.Prefab,\r\n       layoutKnife: cc.Layout,\r\n       labelScore: cc.Label,\r\n       score: 0,\r\n       numberKnife: 0,\r\n       level: 1,\r\n    },\r\n\r\n    onLoad () {\r\n        this.node.on('touchstart', this.throwKnife, this);\r\n        this.isThrow = true;\r\n        this.boardNode.zIndex = 1;\r\n        this.boardRotation = 3;\r\n        this.knifeNodeArr = [];\r\n        setInterval(()=>{\r\n            this.changeSpeed();\r\n        }, 2000);\r\n        this.remainKnife = this.layoutKnife.node.childrenCount;\r\n    },\r\n\r\n    changeSpeed(){\r\n        let directionRotation = Math.random() > 0.5 ? 1 : -1;\r\n        let speedRotation = 1 + Math.random() * 4;\r\n        this.boardRotation = directionRotation * speedRotation;\r\n    },\r\n\r\n    throwKnife() {\r\n        if(this.isThrow){\r\n            this.isThrow = false;\r\n            this.layoutKnife.node.children[this.numberKnife].active= false;\r\n            this.remainKnife--;\r\n            this.numberKnife++;\r\n            this.knifeNode.runAction(\r\n                cc.sequence(\r\n                    cc.moveTo(0.1, cc.v2(this.knifeNode.x, this.boardNode.y - this.boardNode.width/2)), \r\n                    cc.callFunc(()=>{\r\n                        let isHit = false;\r\n                        for(let knifeNode of this.knifeNodeArr){\r\n                            if(Math.abs(knifeNode.angle) < 15 || Math.abs(360 - knifeNode.angle) < 15){\r\n                                isHit = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if(isHit){\r\n                            this.knifeNode.runAction(cc.sequence(\r\n                                    cc.spawn(\r\n                                        cc.rotateBy(0.1, 360),\r\n                                        cc.moveTo(0.1, cc.v2(this.knifeNode.x, -800))\r\n                                    ),\r\n                                    cc.callFunc(()=>{\r\n                                        cc.director.loadScene('Restart', ()=>{\r\n                                            var getCompo = cc.director.getScene().getChildByName('Canvas').getComponent('GameOver');\r\n                                            getCompo.setScore(this.score);\r\n                                            getCompo.setLevel(this.level);\r\n                                        });\r\n            \r\n                                    })\r\n                                )\r\n                            );\r\n                        } else {\r\n                            let knifeNode = cc.instantiate(this.knifePrefab);\r\n                            knifeNode.setPosition(this.knifeNode.position);\r\n                            this.node.addChild(knifeNode);\r\n                            this.knifeNode.setPosition(cc.v2(0, -450));\r\n                            this.knifeNodeArr.push(knifeNode);\r\n                            this.isThrow = true;\r\n                            this.score++;\r\n                            this.labelScore.string = this.score;\r\n                            if(this.remainKnife === 0){\r\n                                cc.director.loadScene('Level 2');\r\n                            }\r\n                        }  \r\n                    })\r\n                )\r\n            );\r\n        }\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        this.boardNode.angle = (this.boardNode.angle + this.boardRotation) % 360; \r\n        for(let knifeNode of this.knifeNodeArr){\r\n            knifeNode.angle = (knifeNode.angle + this.boardRotation) % 360;\r\n            let rad = Math.PI * (knifeNode.angle - 90) / 180;\r\n            let r = this.boardNode.width / 2;\r\n            knifeNode.x = this.boardNode.x + r * Math.cos(rad);\r\n            knifeNode.y = this.boardNode.y + r * Math.sin(rad);\r\n        }\r\n    },\r\n});\r\n"]}