{"version":3,"sources":["Throw.js"],"names":["cc","Class","extends","Component","properties","boardNode","Node","knifeNode","knifePrefab","Prefab","layoutKnife","Layout","labelScore","Label","score","numberKnife","onLoad","node","on","throwKnife","isThrow","zIndex","boardRotation","knifeNodeArr","setInterval","changeSpeed","remainKnife","childrenCount","directionRotation","Math","random","speedRotation","children","active","runAction","sequence","moveTo","v2","x","y","width","callFunc","isHit","abs","angle","spawn","rotateTo","director","loadScene","instantiate","setPosition","position","addChild","push","string","start","update","dt","rad","PI","r","cos","sin"],"mappings":"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","file":"Throw.js","sourceRoot":"..\\..\\..\\..\\assets\\Script","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n       boardNode: cc.Node,\r\n       knifeNode: cc.Node,\r\n       knifePrefab: cc.Prefab,\r\n       layoutKnife: cc.Layout,\r\n       labelScore: cc.Label,\r\n       score: 0,\r\n       numberKnife: 0,\r\n    },\r\n\r\n    onLoad () {\r\n        this.node.on('touchstart', this.throwKnife, this);\r\n        this.isThrow = true;\r\n        this.boardNode.zIndex = 1;\r\n        this.boardRotation = 3;\r\n        this.knifeNodeArr = [];\r\n        setInterval(()=>{\r\n            this.changeSpeed();\r\n        }, 2000);\r\n        this.remainKnife = this.layoutKnife.node.childrenCount;\r\n    },\r\n\r\n    changeSpeed(){\r\n        let directionRotation = Math.random() > 0.5 ? 1 : -1;\r\n        let speedRotation = 1 + Math.random() * 4;\r\n        this.boardRotation = directionRotation * speedRotation;\r\n    },\r\n\r\n    throwKnife() {\r\n        if(this.isThrow){\r\n            this.isThrow = false;\r\n            this.layoutKnife.node.children[this.numberKnife].active= false;\r\n            this.remainKnife--;\r\n            this.numberKnife++;\r\n            this.knifeNode.runAction(\r\n                cc.sequence(\r\n                    cc.moveTo(0.1, cc.v2(this.knifeNode.x, this.boardNode.y - this.boardNode.width/2)), \r\n                    cc.callFunc(()=>{\r\n                        let isHit = false;\r\n                        for(let knifeNode of this.knifeNodeArr){\r\n                            if(Math.abs(knifeNode.angle) < 15 || Math.abs(360 - knifeNode.angle) < 15){\r\n                                isHit = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if(isHit){\r\n                            this.knifeNode.runAction(cc.sequence(\r\n                                    cc.spawn(\r\n                                        cc.rotateTo(0.1, 60),\r\n                                        cc.moveTo(0.1, cc.v2(this.knifeNode.x, -800))\r\n                                    ),\r\n                                    cc.callFunc(()=>{\r\n                                        cc.director.loadScene('Restart');\r\n                                    })\r\n                                )\r\n                            );\r\n                        } else {\r\n                            let knifeNode = cc.instantiate(this.knifePrefab);\r\n                            knifeNode.setPosition(this.knifeNode.position);\r\n                            this.node.addChild(knifeNode);\r\n                            this.knifeNode.setPosition(cc.v2(0, -450));\r\n                            this.knifeNodeArr.push(knifeNode);\r\n                            this.isThrow = true;\r\n                            this.score++;\r\n                            this.labelScore.string = this.score;\r\n                            if(this.remainKnife === 0){\r\n                                cc.director.loadScene('Level 2');\r\n                            }\r\n                        }  \r\n                    })\r\n                )\r\n            );\r\n        }\r\n    },\r\n\r\n    start () {\r\n        \r\n    },\r\n\r\n    update (dt) {\r\n        this.boardNode.angle = (this.boardNode.angle + this.boardRotation) % 360; \r\n        for(let knifeNode of this.knifeNodeArr){\r\n            knifeNode.angle = (knifeNode.angle + this.boardRotation) % 360;\r\n            let rad = Math.PI * (knifeNode.angle - 90) / 180;\r\n            let r = this.boardNode.width / 2;\r\n            knifeNode.x = this.boardNode.x + r * Math.cos(rad);\r\n            knifeNode.y = this.boardNode.y + r * Math.sin(rad);\r\n        }\r\n    },\r\n});\r\n"]}